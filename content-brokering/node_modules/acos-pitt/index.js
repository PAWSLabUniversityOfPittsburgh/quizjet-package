var http = require('http');
var util = require('util');
var htmlencode = require('htmlencode').htmlEncode;

var ACOSPITT = function() {};

ACOSPITT.addToHead = function(params) {
    params.headContent += '<script src="/static/pitt/jquery.min.js" type="text/javascript"></script>\n';
    params.headContent += '<script src="/static/pitt/events.js" type="text/javascript"></script>\n';
    return true;
};

ACOSPITT.addToBody = function(params, req) {
    //removed from if - req.query.usr && req.query.grp && req.query.sid &&
    if (req.query['act']) {
    
        params.bodyContent += '<input type="hidden" name="acos-usr" value="' + htmlencode(req.query.usr) + '"/>\n';
        params.bodyContent += '<input type="hidden" name="acos-grp" value="' + htmlencode(req.query.grp) + '"/>\n';
        params.bodyContent += '<input type="hidden" name="acos-sid" value="' + htmlencode(req.query.sid) + '"/>\n';
        params.bodyContent += '<input type="hidden" name="acos-act" value="' + htmlencode(req.query['act']) + '"/>\n';
        
        // This is a fixed value for JSVEE animations
        if (req.params.contentType === 'jsvee') {
            params.bodyContent += '<input type="hidden" name="acos-app" value="35"/>\n';
        } else if (req.params.contentType === 'annotated') {
            params.bodyContent += '<input type="hidden" name="acos-app" value="3"/>\n';
        } else if (req.params.contentType === 'jsparsons' || req.params.contentType === 'combo') {
            params.bodyContent += '<input type="hidden" name="acos-app" value="38"/>\n';
        }
        
        return true;
        
    } else {
        return false;
    }
};

ACOSPITT.initialize = function(req, params, handlers, cb) {

    // Initialize the protocol
    var result = ACOSPITT.addToHead(params, req);
    result = result && ACOSPITT.addToBody(params, req);
    
    if (result && req.query['act']) {
        params.name = req.query['act'];
    } else {
        params.error = 'Initialization error';
    }
    
    if (!params.error) {
        // Initialize the content type (and content package)
        handlers.contentTypes[req.params.contentType].initialize(req, params, handlers, function() {
            cb();
        });
    } else {
        cb();
    }
    
};

ACOSPITT.handleEvent = function(event, payload, req, res, protocolData) {

    //jsvee
    if (event === 'line' && protocolData.app && parseInt(protocolData.app, 10) === 35) {

        var endpoint = "http://adapt2.sis.pitt.edu/cbum/um?app=%s&act=%s&sub=%s&usr=%s&grp=%s&sid=%s&res=-1&svc=ACOS";
        endpoint = util.format(endpoint, protocolData.app, protocolData['act'], payload,
            protocolData.usr, protocolData.grp, protocolData.sid);

        http.get(endpoint, function (result) {
            if (result.statusCode === 200) {
                res.json({'status': 'OK'});
            } else {
                res.json({'status': 'ERROR'});
            }
        }).on('error', function (e) {
            res.json({'status': 'ERROR'});
        });

    // Annotated Examples
    } else if(event === 'line' && protocolData.app && parseInt(protocolData.app, 10) === 3) {

        var endpoint = "http://adapt2.sis.pitt.edu/cbum/um?app=%s&act=%s&sub=%s&usr=%s&grp=%s&sid=%s&res=-1&svc=jsWebEx";
        endpoint = util.format(endpoint, protocolData.app, protocolData['act'], payload,
            protocolData.usr, protocolData.grp, protocolData.sid);

        http.get(endpoint, function(result) {
            if (result.statusCode === 200) {
                res.json({'status' : 'OK'});
            } else {
                res.json({'status' : 'ERROR'});
            }
        }).on('error', function(e) {
            res.json({'status' : 'ERROR'});
        });

    //parsons problems
    } else if(event === 'grade' && protocolData.app && parseInt(protocolData.app, 10) === 38) {

        var endpoint = "http://adapt2.sis.pitt.edu/cbum/um?app=%s&act=%s&sub=%s&usr=%s&grp=%s&sid=%s&res=%s&svc=ACOS"; // jshint ignore:line
        endpoint = util.format(endpoint, protocolData.app, 'ps_problems', protocolData['act'],
                               protocolData.usr, protocolData.grp, protocolData.sid, payload.points);
        
        http.get(endpoint, function(result) {
            if (result.statusCode === 200) {
                res.json({'status' : 'OK'});
            } else {
                res.json({'status' : 'ERROR'});
            }
        }).on('error', function(e) {
            res.json({'status' : 'ERROR'});
        });
    } else {
        res.json({'status' : 'OK'});
    }
    
};

ACOSPITT.register = function(handlers, app) {
    handlers.protocols.pitt = ACOSPITT;   
};

ACOSPITT.namespace = 'pitt';

ACOSPITT.meta = {
    'name': 'pitt',
    'shortDescription': 'Protocol to load content by using the Pittsburgh protocol and to communicate with user modeling server.',
    'description': '',
    'author': 'Hardik Vasa',
    'license': 'MIT',
    'version': '0.0.1',
    'url': ''
};

module.exports = ACOSPITT;
